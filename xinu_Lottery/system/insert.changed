/* insert.c - insert */

#include <xinu.h>

/*------------------------------------------------------------------------
 *  insert  -  Insert a process into a queue in descending key order
 *------------------------------------------------------------------------
 */
status	insert(
	  pid32		pid,		/* ID of process to insert	*/
	  qid16		q,		/* ID of queue to use		*/
	  int32		key		/* Key for the inserted process	*/
	)
{
	int16	curr;			/* Runs through items in a queue*/
	int16	prev;			/* Holds previous node index	*/
	int16   userHead;
	uint32  curr_tickets = proctab[pid].tickets;
	int equalFlag = 0;
	int16 nullId;
	if (isbadqid(q) || isbadpid(pid)) {
		return SYSERR;
	}

	if(proctab[pid].is_user_process == 0){

		curr = firstid(q);
		while (queuetab[curr].qkey >= key) {
			curr = queuetab[curr].qnext;
		}

		/* Insert process between curr node and previous node */

		prev = queuetab[curr].qprev;	/* Get index of previous node	*/
		queuetab[pid].qnext = curr;
		queuetab[pid].qprev = prev;
		queuetab[pid].qkey = key;
		queuetab[prev].qnext = pid;
		queuetab[curr].qprev = pid;
		return OK;
	}
	else{
		curr = firstid(q);
		while(proctab[curr].is_user_process == 0){
			nullId = queuetab[curr].qnext;
			//kprintf("Null id %d\n\n\n",nullId);
			if(nullId == 0){
				break;
			}
			curr = queuetab[curr].qnext;
		}
		//kprintf("Curr Id %d\n",curr);
		//kprintf("curr tickets %d\n",curr_tickets);
		while(proctab[curr].tickets >= curr_tickets){

			if(curr == 0)
				break;
			curr = queuetab[curr].qnext;
		}
	
		//kprintf("Final Curr %d\n\n",curr);

		
		
			prev = queuetab[curr].qprev;
			queuetab[pid].qnext = curr;
			queuetab[pid].qprev = prev;
			queuetab[pid].qkey = key;
			queuetab[prev].qnext = pid;
			queuetab[curr].qprev = pid;
			return OK;
		
			
	}
}
